module Main where
import Html exposing (Html, Attribute, toElement)
import Html.Attributes
import Html.Events exposing (on, targetValue)
import Signal exposing (Address)
import StartApp.Simple as StartApp

elmx : Html
elmx = Html.text ""

main =
  StartApp.start { model = empty, view = view, update = update }

-- MODEL

type alias Model =
  { name : String
  , password : String
  , passwordAgain : String
  }


empty : Model
empty =
  Model "" "" ""


-- UPDATE

type Action
    = Name String
    | Password String
    | PasswordAgain String


update : Action -> Model -> Model
update action model =
  case action of
    Name name ->
      { model | name = name }

    Password password ->
      { model | password = password }

    PasswordAgain password ->
      { model | passwordAgain = password }


-- VIEW

view : Address Action -> Model -> Html
view address model =
  let
    validationMessage =
      if model.password == model.passwordAgain then
        <span style="color: green">Passwords Match!</span>
      else
        <span style="color: red">Passwords do not match :(</span>
  in
    <div>
      {field "text" address Name "User Name" model.name}
      {field "password" address Password "Password" model.password}
      {field "password" address PasswordAgain "Re-enter Password" model.passwordAgain}
      <div style={fieldNameStyle "300px"}>{validationMessage}</div>
    </div>

field : String -> Address Action -> (String -> Action) -> String -> String -> Html
field fieldType address toAction name content =
  let
    onInput = on "input" targetValue (\string -> Signal.message address (toAction string))
  in
    <div>
      <div style={fieldNameStyle "160px"}>{=name}</div>
      <input type={fieldType} placeholder={name} value={content} {onInput} />
    </div>


fieldNameStyle : String -> String
fieldNameStyle px =
  "width: " ++ px
  ++ "; padding: 10px"
  ++ "; text-align: right"
  ++ "; display: inline-block"
